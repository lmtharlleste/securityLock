[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "pyotp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyotp",
        "description": "pyotp",
        "detail": "pyotp",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0001_initial",
        "description": "core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserModel',\n            fields=[\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),",
        "detail": "core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0002_alter_usermodel_personal_cod",
        "description": "core.migrations.0002_alter_usermodel_personal_cod",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='usermodel',\n            name='personal_cod',\n            field=models.CharField(blank=True, max_length=16, null=True),\n        ),",
        "detail": "core.migrations.0002_alter_usermodel_personal_cod",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "core.services.auth_backend",
        "description": "core.services.auth_backend",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        try:\n            # Try to find the user by email\n            user = UserModel.objects.get(email=username)\n        except UserModel.DoesNotExist:\n            try:\n                # Try to find the user by username\n                user = UserModel.objects.get(username=username)",
        "detail": "core.services.auth_backend",
        "documentation": {}
    },
    {
        "label": "OtpAppConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class OtpAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('O endereço de e-mail deve ser fornecido')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class UserModel(AbstractBaseUser, PermissionsMixin):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=50)\n    email = models.EmailField(max_length=100, unique=True)\n    username = models.CharField(max_length=150, unique=True, null=True, blank=True)\n    phone = models.CharField(max_length=15, unique=True, null=True, blank=True)\n    password = models.CharField(max_length=32)\n    personal_cod = models.CharField(max_length=16, null=True, blank=True)\n    otp_enabled = models.BooleanField(default=False)\n    otp_verified = models.BooleanField(default=False)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "core.serializers",
        "description": "core.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        #fields = \"__all__\"\n        exclude = [\"id\", \"user_permissions\", \"groups\", \"is_staff\", \"is_active\", \"otp_enabled\", \"otp_verified\", \"otp_base32\", \"otp_auth_url\", \"last_login\"]\n        extra_kwargs = {'password': {'write_only': True}}  # Adicione esta linha se quiser que a senha seja write_only\n    def create(self, validated_data):\n        password = validated_data.pop('password')\n        user = UserModel.objects.create(**validated_data)\n        user.set_password(password)",
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "CustomUserPermissionSerializer",
        "kind": 6,
        "importPath": "core.serializers",
        "description": "core.serializers",
        "peekOfCode": "class CustomUserPermissionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        fields = [\"use_permission\"]",
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    # Autenticação\n    path('token/obtain/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('login', views.LoginView.as_view()),\n    # Rota de registro\n    path('register', views.RegisterView.as_view()),\n    # rotas relacionadas ao otp\n    path('2f/generate', views.GenerateOTP.as_view()),\n    path('2f/verify', views.VerifyOTP.as_view()),\n    path('2f/validate', views.ValidateOTP.as_view()),",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class RegisterView(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            try:\n                serializer.save()\n                return Response({\"status\": \"success\", 'message': \"Registered successfully, please login\"}, status=status.HTTP_201_CREATED)\n            except:",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class LoginView(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        data = request.data\n        email = data.get('email')\n        password = data.get('password')\n        user = authenticate(username=email.lower(), password=password)\n        if user is None:\n            return Response({\"status\": \"fail\", \"message\": \"Incorrect email or password\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "GenerateOTP",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class GenerateOTP(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        data = request.data\n        user_id = data.get('user_id', None)\n        email = data.get('email', None)\n        user = UserModel.objects.filter(id=user_id).first()\n        if user == None:\n            return Response({\"status\": \"fail\", \"message\": f\"No user with Id: {user_id} found\"}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "VerifyOTP",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class VerifyOTP(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        message = \"Token is invalid or user doesn't exist\"\n        data = request.data\n        user_id = data.get('user_id', None)\n        otp_token = data.get('token', None)\n        user = UserModel.objects.filter(id=user_id).first()\n        if user == None:",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "ValidateOTP",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class ValidateOTP(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        message = \"Token is invalid or user doesn't exist\"\n        data = request.data\n        user_id = data.get('user_id', None)\n        otp_token = data.get('token', None)\n        user = UserModel.objects.filter(id=user_id).first()\n        if user == None:",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "DisableOTP",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class DisableOTP(generics.GenericAPIView):\n    serializer_class = UserSerializer\n    queryset = UserModel.objects.all()\n    def post(self, request):\n        data = request.data\n        user_id = data.get('user_id', None)\n        user = UserModel.objects.filter(id=user_id).first()\n        if user == None:\n            return Response({\"status\": \"fail\", \"message\": f\"No user with Id: {user_id} found\"}, status=status.HTTP_404_NOT_FOUND)\n        user.otp_enabled = False",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "UserDetailsAPIView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class UserDetailsAPIView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        serializer = UserSerializer(user)\n        return Response(serializer.data)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "securitylock.asgi",
        "description": "securitylock.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "securitylock.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-78*2w)fltnfl3fy_)go@nww4u7!u(_i^dy(=&4frks5wu-npiv'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-78*2w)fltnfl3fy_)go@nww4u7!u(_i^dy(=&4frks5wu-npiv'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:8000\",\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework_simplejwt',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework_simplejwt',\n    'rest_framework',\n    'corsheaders',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\nROOT_URLCONF = 'securitylock.urls'\nTEMPLATES = [\n    {",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "ROOT_URLCONF = 'securitylock.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "WSGI_APPLICATION = 'securitylock.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.UserModel'",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.UserModel'\nAUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.UserModel'\nAUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']\nSIMPLE_JWT = {",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.UserModel'\nAUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']\nSIMPLE_JWT = {\n    #\"TOKEN_OBTAIN_SERIALIZER\": \"accounts.validate_token.CustomTokenObtainPairSerializer\",\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.UserModel'\nAUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']\nSIMPLE_JWT = {\n    #\"TOKEN_OBTAIN_SERIALIZER\": \"accounts.validate_token.CustomTokenObtainPairSerializer\",\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'core.UserModel'\nAUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']\nSIMPLE_JWT = {\n    #\"TOKEN_OBTAIN_SERIALIZER\": \"accounts.validate_token.CustomTokenObtainPairSerializer\",\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = ['core.services.auth_backend.EmailBackend']\nSIMPLE_JWT = {\n    #\"TOKEN_OBTAIN_SERIALIZER\": \"accounts.validate_token.CustomTokenObtainPairSerializer\",\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "securitylock.settings",
        "description": "securitylock.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    #\"TOKEN_OBTAIN_SERIALIZER\": \"accounts.validate_token.CustomTokenObtainPairSerializer\",\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"VERIFYING_KEY\": \"\",",
        "detail": "securitylock.settings",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "securitylock.urls",
        "description": "securitylock.urls",
        "peekOfCode": "BASE_URL = \"api/v1/\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(BASE_URL, include('core.urls')),\n]",
        "detail": "securitylock.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "securitylock.urls",
        "description": "securitylock.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(BASE_URL, include('core.urls')),\n]",
        "detail": "securitylock.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "securitylock.wsgi",
        "description": "securitylock.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "securitylock.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'securitylock.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]